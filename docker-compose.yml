services:
  app:
    image: ${DOCKER_REGISTRY-}app
    build:
      context: .
      dockerfile: App/Dockerfile
    depends_on:
      - sqlserver
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:8080
    ports:
      - "8080:8080"
  frontend:
    image: node:20-alpine
    working_dir: /app
    depends_on:
      - app
    environment:
      - VITE_API_BASE_URL=http://localhost:8080
      - HOST=0.0.0.0
    volumes:
      - ./FrontEnd/scheduleit:/app
      - frontend_node_modules:/app/node_modules
    command: sh -c "npm ci && npm run dev -- --host 0.0.0.0 --port 5173"
    ports:
      - "5173:5173"
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
        ACCEPT_EULA: "Y"
        MSSQL_SA_PASSWORD: "MyP@ssw0rd123"
    ports:
        - "3333:1433"
    volumes:
        - sqlserverdata:/var/opt/mssql
    healthcheck:
      test: ["CMD", "bash", "-c", "> /dev/tcp/localhost/1433 && exit 0 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s
  db-init:
    image: mcr.microsoft.com/mssql-tools:latest
    depends_on:
      sqlserver:
        condition: service_healthy
    volumes:
      - ./db-scripts:/scripts:ro
    entrypoint: ["/bin/bash", "-c"]
    command:
      - >
        sleep 5; for i in {1..60}; do /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P "MyP@ssw0rd123" -Q "SELECT 1" && break || echo "Waiting for SQL..." && sleep 2; done;
        /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P "MyP@ssw0rd123" -Q "IF DB_ID('myDb') IS NULL CREATE DATABASE [myDb]";
        /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P "MyP@ssw0rd123" -d myDb -i /scripts/migrations.sql

volumes:
  sqlserverdata:
  frontend_node_modules:
